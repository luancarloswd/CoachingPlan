<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidCEP" xml:space="preserve">
    <value>CEP inválido</value>
  </data>
  <data name="InvalidCidade" xml:space="preserve">
    <value>Cidade inválida</value>
  </data>
  <data name="InvalidCNPJ" xml:space="preserve">
    <value>CNPJ inválido</value>
  </data>
  <data name="InvalidCPF" xml:space="preserve">
    <value>CPF inválido</value>
  </data>
  <data name="InvalidDataNascimento" xml:space="preserve">
    <value>Data de nascimento inválida</value>
  </data>
  <data name="InvalidDDD" xml:space="preserve">
    <value>O valor do DDD deve conter 2 digítos</value>
  </data>
  <data name="InvalidDescricao" xml:space="preserve">
    <value>Descriçaõ inválida</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>E-mail inválido</value>
  </data>
  <data name="InvalidEstado" xml:space="preserve">
    <value>Estado inválido</value>
  </data>
  <data name="InvalidGenero" xml:space="preserve">
    <value>Gênero inválido</value>
  </data>
  <data name="InvalidNome" xml:space="preserve">
    <value>Nome inválido</value>
  </data>
  <data name="InvalidNumero" xml:space="preserve">
    <value>Número inválido</value>
  </data>
  <data name="InvalidRua" xml:space="preserve">
    <value>Rua inválida</value>
  </data>
  <data name="InvalidStatus" xml:space="preserve">
    <value>Status inválido</value>
  </data>
  <data name="InvalidStrongPoint" xml:space="preserve">
    <value>Ponto forte inválido</value>
  </data>
  <data name="InvalidTelefone" xml:space="preserve">
    <value>O valor do número de telefone deve conter 8 digítos</value>
  </data>
  <data name="InvalidTipoEndereco" xml:space="preserve">
    <value>Tipo de endereço inválido</value>
  </data>
  <data name="InvalidWeakness" xml:space="preserve">
    <value>Fragilidade inválida</value>
  </data>
  <data name="TelefoneNotFound" xml:space="preserve">
    <value>Telefone não encontrado</value>
  </data>
  <data name="InvalidClassStrongPoint" xml:space="preserve">
    <value>Classe inválide</value>
  </data>
  <data name="InvalidProfession" xml:space="preserve">
    <value>Profissão inválida</value>
  </data>
  <data name="InvalidSpecialty" xml:space="preserve">
    <value>Especialidade inválida</value>
  </data>
  <data name="InvalidTraining" xml:space="preserve">
    <value>Formação inválida</value>
  </data>
  <data name="CoacheeNotFound" xml:space="preserve">
    <value>Coachee não encontrado</value>
  </data>
  <data name="CoachNotFound" xml:space="preserve">
    <value>Coach não encontrado</value>
  </data>
  <data name="EnderecoNotFound" xml:space="preserve">
    <value>Endereço não encontrado</value>
  </data>
  <data name="PersonNotFound" xml:space="preserve">
    <value>Pessoa não encontrada</value>
  </data>
  <data name="SpecialtyNotFound" xml:space="preserve">
    <value>Especialidade não encontrada</value>
  </data>
  <data name="StrongPointNotFound" xml:space="preserve">
    <value>Ponto Forte não encontrado</value>
  </data>
  <data name="TrainingNotFound" xml:space="preserve">
    <value>Formação não encontrada</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>Usuário não encontrado</value>
  </data>
  <data name="WeaknessNotFound" xml:space="preserve">
    <value>Fragilidade não encontrada</value>
  </data>
  <data name="Failure" xml:space="preserve">
    <value>Login falhou</value>
  </data>
  <data name="LockedOut" xml:space="preserve">
    <value>Usuário bloqueado</value>
  </data>
  <data name="RequiresVerification" xml:space="preserve">
    <value>Verificação necessária</value>
  </data>
  <data name="InvalidCredentials" xml:space="preserve">
    <value>Dados Inválidos</value>
  </data>
  <data name="RegistrationFailure" xml:space="preserve">
    <value>Registro falhou</value>
  </data>
</root>